#!/usr/bin/perl
use strict;
use warnings;

use DBI;
use DBD::Pg;
use Time::HiRes qw(time sleep);
use Data::Dumper;
use DateTime;
use IO::Select;

$| = 1;

my @DispatchConnect = ("dbi:Pg:", '', '', {pg_enable_utf8 => 1, sslmode => 'require', RaiseError => 1, PrintError => 0, AutoCommit => 1});
my @RunConnect      = ("dbi:Pg:", '', '', {pg_enable_utf8 => 1, sslmode => 'require', RaiseError => 0, PrintError => 0, AutoCommit => 1});
my @LISTENConnect   = ("dbi:Pg:", '', '', {pg_enable_utf8 => 1, sslmode => 'require', RaiseError => 1, PrintError => 0, AutoCommit => 1});
my $LISTENName = 'cron.Dispatch()';

sub tprint {
    my $msg = shift;
    print DateTime->now(time_zone => 'local')->datetime() . ' ' . $msg . "\n";
}

my $Processes = {};
my $Connections = {};
my $ConnectionID = 0; # Sequence, starts at 1
my $ConnectionPools = {};
my $Select = IO::Select->new();

my $StartupTime = time();
my $DispatchDatabaseHandle = DBI->connect(@DispatchConnect) or die "Unable to connect";
my $ConnectTime = time() - $StartupTime;
my $Terminate_All_Backends = $DispatchDatabaseHandle->prepare('SELECT cron.Terminate_All_Backends()');
my $Reset_RunAtTime        = $DispatchDatabaseHandle->prepare('SELECT cron.Reset_RunAtTime()');
my $Dispatch               = $DispatchDatabaseHandle->prepare('SELECT RunProcessID, RunInSeconds, MaxProcesses, ConnectionPoolID, RetryOnError FROM cron.Dispatch()');
my $Log_Error              = $DispatchDatabaseHandle->prepare('SELECT cron.Log_Error(_ProcessID := $1, _PgBackendPID := $2, _PgErr := $3, _PgErrStr := $4, _PgState := $5, _PerlCallerInfo := $6, _RetryInSeconds := $7)');
my $Disable_Process        = $DispatchDatabaseHandle->prepare('SELECT cron.Disable_Process(_ProcessID := $1)');
$Select->add($DispatchDatabaseHandle->{pg_socket});

unless ($DispatchDatabaseHandle->{pg_user} eq 'pgcronjob') {
    die "Not connected as the 'pgcronjob' database user!";
}

for (;;) {
    $Terminate_All_Backends->execute();
    my ($OK) = $Terminate_All_Backends->fetchrow_array();
    if ($OK == 1) {
        # all cron.Run() processes have now been terminated
        last;
    }
    tprint("Waiting for old cron processes to be terminated");
    sleep(1); # wait for processes to be terminated
}
$Reset_RunAtTime->execute();

my $LISTENDatabaseHandle = DBI->connect(@LISTENConnect) or die "Unable to connect LISTEN database handle";
$LISTENDatabaseHandle->do(qq{LISTEN "$LISTENName"}) or die "Unable to LISTEN: " . $LISTENDatabaseHandle->errstr;
$Select->add($LISTENDatabaseHandle->{pg_socket});

tprint("PgCronJob is now running");

my $DispatchTime = time();
my $NumProcesses = {};

sub FinishDisconnect {
    my $ProcessID = shift;
    my $Process = $Processes->{$ProcessID};
    if (!defined $Process) {
        return 1; # OK, no such process
    }
    if (!defined $Process->{ConnectionID}) {
        return 1; # OK, no such database handle
    }
    $Connections->{$Process->{ConnectionID}}->{PreparedQuery}->finish;
    $Connections->{$Process->{ConnectionID}}->{PreparedQuery} = undef;
    delete $Process->{Run};
    $Select->remove($Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->{pg_socket});
    $Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->disconnect;
    $Connections->{$Process->{ConnectionID}}->{DatabaseHandle} = undef;
    delete $Connections->{$Process->{ConnectionID}}->{DatabaseHandle};
    delete $Process->{ConnectionID};
    return 1; #OK, finished and disconnected
}

# CheckErr checks if a non-true $ReturnValue was due to a database error or not.
sub CheckErr {
    my ($ReturnValue, $ProcessID) = @_;
    my ($Package, $FileName, $Line) = caller();
    if ($ReturnValue) {
        # OK since $ReturnValue evaluated to true
        return 1;
    }

    my $Process = $Processes->{$ProcessID};
    if (!defined $Process || !defined $Process->{ConnectionID}) {
        return 0; # error, no such process or database handle
    }

    my $Run               = \$Process->{Run};
    my $RunAtTime         = \$Process->{RunAtTime};
    my $RetryOnError      = \$Process->{RetryOnError};

    if (!defined($Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->err) || $Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->err == 0) {
        # OK since it was not a database error,
        # so the non-true $ReturnValue must have been
        # due to no rows returned or some other non-error situation
        return 1;
    }

    my $PgState = $Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->state;

    $Log_Error->execute(
        $ProcessID,
        $Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->{pg_pid},
        $Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->err,
        $Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->errstr,
        $PgState,
        "$FileName line $Line",
        $$RetryOnError
    );

    FinishDisconnect($ProcessID);

    if ($PgState eq '40P01') {
        # deadlock detected, always retry since a deadlock is normal
        $$RunAtTime = time() + 1;
    } elsif (defined $$RetryOnError) {
        $$RunAtTime = time() + $$RetryOnError;
    } else {
        delete $Processes->{$ProcessID};
        $Disable_Process->execute($ProcessID);
    }

    return 0;
}

sub DumpState {
    tprint("ConnectTime: $ConnectTime\n"
        . "DispatchTime: $DispatchTime\n"
        . "NumProcesses:\n"
        . Dumper($NumProcesses)
        . "Processes:\n"
        . Dumper($Processes)
    );
}

$SIG{HUP} = \&DumpState;

for (;;) {
    if (time() > $DispatchTime) {
        $Dispatch->execute();
        my ($RunProcessID, $RunInSeconds, $MaxProcesses, $ConnectionPoolID, $RetryOnError) = $Dispatch->fetchrow_array();
        if (defined $RunProcessID) {
            $Processes->{$RunProcessID} = {
                RunAtTime        => time() + $RunInSeconds,
                MaxProcesses     => $MaxProcesses,
                ConnectionPoolID => $ConnectionPoolID,
                RetryOnError     => $RetryOnError
            };
        } else {
            $DispatchTime = time()+1;
        }

    }
    my $WakeUpTime = $DispatchTime;
    my $CurrentTime = time();
    foreach my $ProcessID (sort {$Processes->{$a}->{RunAtTime} <=> $Processes->{$b}->{RunAtTime}} keys %{$Processes}) {
        my $Process = $Processes->{$ProcessID};
        my $RunAtTime         = \$Process->{RunAtTime};
        my $RunASAP           = \$Process->{RunASAP};
        my $MaxProcesses      = \$Process->{MaxProcesses};
        my $ConnectionPoolID  = \$Process->{ConnectionPoolID};
        my $RetryOnError      = \$Process->{RetryOnError};
        if (defined $$ConnectionPoolID && !defined $NumProcesses->{$$ConnectionPoolID}) {
            $NumProcesses->{$$ConnectionPoolID} = 0;
        }
        if ($$RunAtTime > 0) {
            if (defined $$MaxProcesses && $$MaxProcesses ne '' && $NumProcesses->{$$ConnectionPoolID} >= $$MaxProcesses) {
                # Can't run this process anywhere; don't adjust WakeUpTime
                next;
            }
            if ($$RunAtTime < $WakeUpTime) {
                $WakeUpTime = $$RunAtTime;
            }
            if ($$RunAtTime > $CurrentTime) {
                next;
            }
            if (defined $$ConnectionPoolID) {
                if (!defined $ConnectionPools->{$$ConnectionPoolID}) {
                    $ConnectionPools->{$$ConnectionPoolID} = [];
                }
                $Process->{ConnectionID} = pop @{$ConnectionPools->{$$ConnectionPoolID}};
                if (defined ($Process->{ConnectionID})) {
                    $Select->add($Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->{pg_socket});
                }
            }
            unless (defined $Process->{ConnectionID}) {
                $ConnectionID++;
                $Process->{ConnectionID} = $ConnectionID;
                $Connections->{$ConnectionID}->{DatabaseHandle} = DBI->connect(@RunConnect) or die "Unable to connect";
                $Select->add($Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->{pg_socket});
                $Connections->{$Process->{ConnectionID}}->{PreparedQuery} = $Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->prepare('SELECT RunInSeconds FROM cron.Run(_ProcessID := $1)', {pg_async => PG_ASYNC}) or die "Unable to prepare";
            }
            CheckErr($Connections->{$Process->{ConnectionID}}->{PreparedQuery}->execute($ProcessID), $ProcessID) or die "Unexpected execute error";
            $$RunAtTime = 0;
            if (defined $$ConnectionPoolID) {
                $NumProcesses->{$$ConnectionPoolID}++;
            }
        } elsif ($Connections->{$Process->{ConnectionID}}->{PreparedQuery}->pg_ready) {
            if (defined $$ConnectionPoolID) {
                $NumProcesses->{$$ConnectionPoolID}--;
            }
            my $Rows = $Connections->{$Process->{ConnectionID}}->{PreparedQuery}->pg_result;
            CheckErr($Rows, $ProcessID) or next;
            if ($Rows > 1) {
                die "Unexpected numbers of rows: $Rows";
            }
            my ($RunInSeconds) = $Connections->{$Process->{ConnectionID}}->{PreparedQuery}->fetchrow_array();
            CheckErr($RunInSeconds, $ProcessID) or next;
            if ($Connections->{$Process->{ConnectionID}}->{PreparedQuery}->fetchrow_array()) {
                die "Unexpected extra row returned";
            }
            if (defined $$ConnectionPoolID) {
                $Connections->{$Process->{ConnectionID}}->{PreparedQuery}->finish;
                $Select->remove($Connections->{$Process->{ConnectionID}}->{DatabaseHandle}->{pg_socket});
                push @{$ConnectionPools->{$$ConnectionPoolID}}, $Process->{ConnectionID};
                delete $Process->{ConnectionID};
            } elsif (!defined $RunInSeconds || $RunInSeconds > $ConnectTime) {
                FinishDisconnect($ProcessID);
            } else {
                # Keeping connection open since we should run again soon
            }
            if (defined $RunInSeconds) {
                # We want to actually assign a time here in order to let
                # the main loop prioritize the tasks correctly.
                $$RunAtTime = $CurrentTime + ($$RunASAP ? 0 : $RunInSeconds);
                if ($$RunAtTime < $WakeUpTime) {
                    $WakeUpTime = $$RunAtTime;
                }
                $$RunASAP = undef;
            } else {
                delete $Processes->{$ProcessID};
            }
        }
    }
    while (my $NOTIFY = $LISTENDatabaseHandle->pg_notifies) {
        my ($NOTIFYName, $NOTIFYPID, $NOTIFYPayload) = @$NOTIFY;
        unless ($NOTIFYName eq $LISTENName && $NOTIFYPayload =~ m/^\d+$/) {
            die "Unexpected notification $NOTIFYName $NOTIFYPayload";
        }
        my $ProcessID = $NOTIFYPayload;
        if (!defined $Processes->{$ProcessID}) {
            # This could happen because notifications can be delayed
            # for an arbitrary amount of time.
            next;
        }
        if ($Processes->{$ProcessID}->{RunAtTime} > 0) {
            $Processes->{$ProcessID}->{RunAtTime} = $CurrentTime;
            $WakeUpTime = $CurrentTime;
        } else {
            $Processes->{$ProcessID}->{RunASAP} = 1;
            $WakeUpTime = 0;
        }
    }
    $CurrentTime = time();
    my $MaxSleep = $WakeUpTime - $CurrentTime;
    if ($MaxSleep <= 0) {
        next;
    } elsif ($MaxSleep > 0.250) {
        $MaxSleep = 0.250;
    }
    $Select->can_read($MaxSleep);
}
